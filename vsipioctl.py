#!/usr/bin/env python3
from xml.etree import ElementTree as ET
from datetime import datetime


def SubElement(parent, tag, text=None, attributes={}):
    e = ET.SubElement(parent, tag, attrib=attributes)
    e.text = text
    return e

def createVsipNs(parent):
    ns = SubElement(parent, tag="namespaces")
    n = SubElement(ns, tag="namespace", attributes = {"path":"vsip"})
    SubElement(n, tag="description", text = "vsipioctl commands")

    return ns

def createVsipCli(parent):
    cli = SubElement(parent, tag="commands")

    c = SubElement(cli, tag="command", attributes={"path":"vsip.dvfilters"})
    SubElement(c, tag="description", text="Run summarize-dvfilters")
    inputspec = SubElement(c, tag="input-spec")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-summarize-dvfilters.sh")

    c = SubElement(cli, tag="command", attributes={"path":"vsip.help"})
    SubElement(c, tag="description", text="Run vsipioctl help")
    inputspec = SubElement(c, tag="input-spec")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh help")

    c = SubElement(cli, tag="command", attributes={"path":"vsip.getfilters"})
    SubElement(c, tag="description", text="Run vsipioctl getfilters - get list of filters")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"filter", "shortname":"f", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="filter name, e.g., nic-1002672-eth0-vmware-sfw.2")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"stats", "shortname":"s", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="print statistics")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"resetstats", "shortname":"z", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="reset filter statistics")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"filterstoslowpath", "shortname":"d", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="get filter to slowpath distribution")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"slowpath", "shortname":"c", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="get slowpath to filter distribution")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"number", "shortname":"n", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="get number of filters")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getfilters $if{stats, -s} $if{resetstats, -z} $if{filterstoslowpath, -d} $if{slowpath, -c $val{slowpath}} $if{number, -n $val{number}} $if{filter, -f $val{filter}}")


    c = SubElement(cli, tag="command", attributes={"path":"vsip.getfwconfig"})
    SubElement(c, tag="description", text="Run vsipioctl getfwconfig - get rules, addrsets and containers of a filter")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"filter", "shortname":"f", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="filter name, e.g., nic-1002672-eth0-vmware-sfw.2")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"verbose", "shortname":"v", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="enable verbose log")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"component", "shortname":"m", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="verbose log component name or id")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"summary", "shortname":"i", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="print summary info only")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getfwconfig $if{summary, -i} $if{verbose, -v$val{verbose}} $if{component, -m $val{component}} -f $val{filter}")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getrules"})
    SubElement(c, tag="description", text="Run vsipioctl getrules - get rules of a filter")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"filter", "shortname":"f", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="filter name, e.g., nic-1002672-eth0-vmware-sfw.2")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"verbose", "shortname":"v", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="enable verbose log")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"component", "shortname":"m", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="verbose log component name or id")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"ruleset", "shortname":"r", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="ruleset to get rules")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"stats", "shortname":"s", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="print statistics")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getrules $if{verbose, -v$val{verbose}} $if{component,-m $val{component}} $if{ruleset, -r $val{ruleset}} $if{stats, -s} -f $val{filter}")

    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getaddrsets"})
    SubElement(c, tag="description", text="Run vsipioctl getaddrsets with options")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"filter", "shortname":"f", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="filter name, e.g. nic-1002672-eth0-vmware-sfw.2")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"verbose", "shortname":"v", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="enable verbose log")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"component", "shortname":"m", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="verbose log component name or id")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"addr", "shortname":"a", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="profile to get addresses or attributes")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"pending", "shortname":"p", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="command applies to pending/inactive sets")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"count", "shortname":"n", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="get addrset count of <filter>")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"list", "shortname":"l", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="get list of addrsets of <filter>")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"stats", "shortname":"s", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="get stats for addrsets of <filter>")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"info", "shortname":"i", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="get addrset info, requires -a, -A is implied")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"all", "shortname":"A", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="return all(local + root)")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"original", "shortname":"o", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="always use orginal filter")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"validation", "shortname":"c", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="run validation on addrsets")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getaddrsets $if{verbose, -v${val,verbose}} $if{component, -m $val{component}} $if{addr, -r $val{addr}} $if{stats, -s} $if{pending, -p} $if{count, -n} $if{list, -l} $if{stats, -s} $if{info, -i} $if{all, -A} $if{original, -o} $if{validation, -c}  -f $val{filter}")
    

    c = SubElement(cli, tag="command", attributes={"path":"vsip.getcontainers"})
    SubElement(c, tag="description", text="Run vsipioctl getcontainers - get containers of a filter")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"filter", "shortname":"f", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="filter name, e.g. nic-1002672-eth0-vmware-sfw.2")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"verbose", "shortname":"v", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="enable verbose log")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"component", "shortname":"m", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="verbose log component name or id")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"addr", "shortname":"a", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="profile to get addresses or attributes")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"pending", "shortname":"p", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="command applies to pending/inactive sets")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"count", "shortname":"n", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="get addrset count of <filter>")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"list", "shortname":"l", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="get list of addrsets of <filter>")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"stats", "shortname":"s", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="get stats for addrsets of <filter>")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"info", "shortname":"i", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="get addrset info, requires -a, -A is implied")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"all", "shortname":"A", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="return all(local + root)")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"original", "shortname":"o", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="always use orginal filter")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"validation", "shortname":"c", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="run validation on addrsets")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getcontainers $if{verbose, -v$val{verbose}} $if{component,-m $val{component}} $if{addr, -r $val{addr}} $if{stats, -s} $if{pending, -p} $if{count, -n} $if{list, -l} $if{stats, -s} $if{info, -i} $if{all, -A} $if{original, -o} $if{validation, -c}  -f $val{filter}")
    
    

    c = SubElement(cli, tag="command", attributes={"path":"vsip.getflows"})
    SubElement(c, tag="description", text="Run vsipioctl getflows - get flows of a filter")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"filter", "shortname":"f", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="filter name, e.g. nic-1002672-eth0-vmware-sfw.2")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"refresh", "shortname":"t", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="refresh interval in seconds - does not work via esxcli")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"all", "shortname":"A", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="return all flows (stateless, no_flow, L7 inprogress)")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"type", "shortname":"T", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="type of flows only: ative, inactive, drop")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"flush", "shortname":"F", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="flush flows in kiernel after fetching, must be 0 or 1")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"count", "shortname":"n", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="display number of flows only")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"reset", "shortname":"R", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="reset RTT average")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"attr", "shortname":"a", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="don't include attributes")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"sip4", "shortname":"s", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="source IPv4 address (mask optional)")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"sip6", "shortname":"S", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="source IPv6 address (mask optional)")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"dip4", "shortname":"d", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="destination IPv4 address (mask optional)")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"dip6", "shortname":"D", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="destination IPv6 address (mask optional)")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"proto", "shortname":"p", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="protocol")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"sport", "shortname":"x", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="source port")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"dport", "shortname":"y", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="destination port")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getflows $if{refresh, -t $val{refresh}} $if{all, -A} $if{type, -T $val{type}} $if{count, -n} $if{flush, -F $val{flush}} $if{reset, -R} $if{attr, -a} $if{sip, -s $val{sip4}} $if{sip6, -S $val{sip6}} $if{dip4, -d $val{dip4}} $if{dip6, -D $val{dip6}} $if{proto, -p $val{proto}} $if{sport, -x $val{sport}} $if{dport, -y $val{dport}} -f $val{filter}")
    
    
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getconncount"})
    SubElement(c, tag="description", text="Run vsipioctl getconncount - get active connection count")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"filter", "shortname":"f", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="filter name, e.g. nic-1002672-eth0-vmware-sfw.2")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getconncount -f $val{filter}")

    c = SubElement(cli, tag="command", attributes={"path":"vsip.getconnections"})
    SubElement(c, tag="description", text="Run vsipioctl getconnections - get active connections")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"filter", "shortname":"f", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="filter name, e.g. nic-1002672-eth0-vmware-sfw.2")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"refresh", "shortname":"t", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="refresh interval in seconds) - does not work via esxcli due to persistence")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getconnections $if{refresh, -t $val{refresh}} -f $val{filter}")

    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getsisvmstats"})
    SubElement(c, tag="description", text="Run vsipioctl getsisvmstats - get service insertion service VM stats")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"port", "shortname":"p", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="SVM port ID, example: 67108875")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getsisvmstats -p $val{port}")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getsisvctable"})
    SubElement(c, tag="description", text="Run vsipioctl getsinshtable - dump service insertion service table")
    inputspec = SubElement(c, tag="input-spec")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getsisvctable")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getsinshtable"})
    SubElement(c, tag="description", text="Run vsipioctl getsinshtable - display service insertion nsh table")
    inputspec = SubElement(c, tag="input-spec")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getsinshtable")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getsiproxytable"})
    SubElement(c, tag="description", text="Run vsipioctl getsiproxytable - display service insertion proxy table")
    inputspec = SubElement(c, tag="input-spec")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getsiproxytable")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getsifailedspis"})
    SubElement(c, tag="description", text="Run vsipioctl getsifailedspis - get service insertion failed spi table")
    inputspec = SubElement(c, tag="input-spec")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getsifailedspis")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getsiflowprogtable"})
    SubElement(c, tag="description", text="Run vsipioctl getsiflowprogtable - get service insertion flow programming table")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"vif", "shortname":"v", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="GVM filter vif ID, example: 795c5d88-13e4-4cfb-b086-d42cc48109a0")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getsiflowprogtable -v $val{vif}")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getsislotid"})
    SubElement(c, tag="description", text="Run vsipioctl getsislotid - get service insertion slot id")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"vif", "shortname":"v", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="GVM filter vif ID, example: 795c5d88-13e4-4cfb-b086-d42cc48109a0")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getsislotid -v $val{vif}")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getsilbenablestatus"})
    SubElement(c, tag="description", text="Run vsipioctl getsilbenablestatus - get service insertion load balance enable status")
    inputspec = SubElement(c, tag="input-spec")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getsilbenablestatus")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getsistatus"})
    SubElement(c, tag="description", text="Run vsipioctl getsistatus - get service insertion classifier port status")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"vif", "shortname":"v", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="GVM filter vif ID, example: 795c5d88-13e4-4cfb-b086-d42cc48109a0")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getsistatus -v $val{vif}")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getmeminfo"})
    SubElement(c, tag="description", text="Run vsipioctl getmeminfo - get meminfo data")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"dynamic", "shortname":"s", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="show dynamic allocations (debug mode only)")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"decode", "shortname":"d", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="decode functions (debug mode only)")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"log", "shortname":"l", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="only log result, no data in return structure")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getmeminfo $if{dyanmic, -s} $if{decode, -d} $if{log, -l}")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.initvsiplogging"})
    SubElement(c, tag="description", text="Run vsipioctl initvsiplogging - init vsip logger")
    inputspec = SubElement(c, tag="input-spec")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh initvsiplogging")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getfqdnentries"})
    SubElement(c, tag="description", text="Run vsipioctl getfqdnentries - get fqdn entries")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"filter", "shortname":"f", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="-f <string>, filter name, e.g., nic-1002672-eth0-vmware-sfw.2")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getfqdnentries -f $val{filter}")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getdnsconfigprofile"})
    SubElement(c, tag="description", text="Run vsipioctl getdnsconfigprofile - get dns config profile for a filter")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"verbose", "shortname":"v", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="enable verbose log")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"filter", "shortname":"f", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="filter name, e.g., nic-1002672-eth0-vmware-sfw.2")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getdnsconfigprofile $if{verbose, -v $val{verbose}} -f $val{filter}")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getfilterstat"})
    SubElement(c, tag="description", text="Run vsipioctl getfilterstat - get statistics of a filter")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"verbose", "shortname":"v", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="enable verbose log")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"filter", "shortname":"f", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="filter name, e.g., nic-1002672-eth0-vmware-sfw.2")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"resetstats", "shortname":"z", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="vsipioctl getfilterstat [-z] -f <filter>, reset the stats to zero")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getfilterstat $if{verbose, -v $val{verbose}} $if{resetstats, -z}-f $val{filter}")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.gettimeout"})
    SubElement(c, tag="description", text="Run vsipioctl gettimeout - get connection timeout setting of a filter")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"filter", "shortname":"f", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="filter name, e.g., nic-1002672-eth0-vmware-sfw.2")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"verbose", "shortname":"v", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="enable verbose log")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"timeout", "shortname":"t", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="connection timeout name")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh gettimeout $if{verbose, -v $val{verbose}} $if{timeout, -t $val{timeout}} -f $val{filter}")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.getfloodstat"})
    SubElement(c, tag="description", text="Run vsipioctl getfloodstat - get flood protection status")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"filter", "shortname":"f", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="-f <string>, filter name, e.g., nic-1002672-eth0-vmware-sfw.2")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"status", "shortname":"s", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="vsipioctl getfloodstat [-s] -f <filter>, include syncache status")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"zero", "shortname":"z", "type":"flag", "required":"false"})
    SubElement(inputparam, tag="description", text="vsipioctl getfloodstat -z -f <filter>, zero flood + syncache counters")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getfloodstat $if{status, -s} $if{timeout, -z} -f $val{filter}")
    
    c = SubElement(cli, tag="command", attributes={"path":"vsip.sidcache"})
    SubElement(c, tag="description", text="Run vsipioctl getsidcache - get sid cache of a filter")
    inputspec = SubElement(c, tag="input-spec")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"filter", "shortname":"f", "type":"string", "required":"true"})
    SubElement(inputparam, tag="description", text="filter name, e.g., nic-1002672-eth0-vmware-sfw.2")
    inputparam = SubElement(inputspec, tag="parameter", attributes={"name":"verbose", "shortname":"v", "type":"string", "required":"false"})
    SubElement(inputparam, tag="description", text="enable verbose log")
    outputspec = SubElement(c, tag="output-spec")
    SubElement(outputspec, tag="string")
    formatparam = SubElement(c, tag="format-parameters")
    SubElement(formatparam, tag="formatter", text="simple")
    SubElement(c, tag="execute", text="/opt/esxcliext/bin/esxcli-vsipioctl.sh getsidcache $if{verbose, -v $val{verbose}}  -f $val{filter}")
    
    return cli
                            
    

def createVsipExt(filename):
    root=ET.Element("plugin", attrib={"xmlns":"http://www.vmware.com/Products/ESX/5.0/esxcil/"})
    SubElement(root, tag="version", text="1.0.0")
    createVsipNs(root)
    createVsipCli(root)
    tree = ET.ElementTree(root)
    ET.indent(tree, '    ')
    with open(filename, 'wb') as f:
        tree.write(f, xml_declaration=True)
    
def main():    
    createVsipExt("nsx-vsipioctl.xml")
    
if __name__ == '__main__':
    main()    
